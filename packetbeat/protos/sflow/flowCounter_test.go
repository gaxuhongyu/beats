package sflow

import (
	"bytes"
	"io"
	"reflect"
	"testing"
)

var TestDecodeCounterSampleHeaderData = []byte{
	0x00, 0x04, 0xAC, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x58,
	0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x02, 0x54, 0x0B, 0xE4, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03,
	0x00, 0x05, 0x4E, 0xAF, 0x72, 0x4C, 0xB3, 0xA4, 0x2C, 0x5F, 0x1C, 0x7B, 0x01, 0x42, 0x8D, 0x3E, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x0F, 0x64, 0x90, 0xB9, 0xE8, 0x7A, 0x50, 0x66, 0xED, 0x16, 0x90, 0x89, 0x78, 0xAB,
	0x00, 0x00, 0x03, 0x3A, 0x00, 0x00, 0x15, 0xB4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x34,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x0F,
}

var TestDecodeSFGenericInterfaceCounterData = []byte{
	0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x02, 0x54, 0x0B, 0xE4, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03,
	0x00, 0x05, 0x4E, 0xAF, 0x72, 0x4C, 0xB3, 0xA4, 0x2C, 0x5F, 0x1C, 0x7B, 0x01, 0x42, 0x8D, 0x3E, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x0F, 0x64, 0x90, 0xB9, 0xE8, 0x7A, 0x50, 0x66, 0xED, 0x16, 0x90, 0x89, 0x78, 0xAB,
	0x00, 0x00, 0x03, 0x3A, 0x00, 0x00, 0x15, 0xB4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
}

var TestDecodeSFEthernetInterfaceCounters = []byte{
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x0F,
}

func Test_decodeCounterSampleHeader(t *testing.T) {
	type args struct {
		r   io.ReadSeeker
		tag uint32
	}
	tests := []struct {
		name    string
		args    args
		want    *SFCounterSampleHeader
		wantErr bool
	}{
		{
			name: "Test decode counter sample header",
			args: args{
				r:   bytes.NewReader(TestDecodeCounterSampleHeaderData),
				tag: uint32(4),
			},
			want: &SFCounterSampleHeader{
				SequenceNo:    0x04AC52,
				SourceIDType:  0,
				SourceIDIndex: 0x64,
				SamplesNo:     2,
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := decodeCounterSampleHeader(tt.args.r, tt.args.tag)
			if (err != nil) != tt.wantErr {
				t.Errorf("decodeCounterSampleHeader() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("decodeCounterSampleHeader() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_decodeSFGenericInterfaceCounter(t *testing.T) {
	type args struct {
		r io.ReadSeeker
	}
	tests := []struct {
		name    string
		args    args
		want    *SFGenericInterfaceCounters
		wantErr bool
	}{
		{
			name: "Test decode generic interface counter",
			args: args{
				r: bytes.NewReader(TestDecodeSFGenericInterfaceCounterData),
			},
			want: &SFGenericInterfaceCounters{
				IfIndex:            0x64,
				IfType:             6,
				IfSpeed:            uint64(0x2540BE400),
				IfDirection:        1,
				IfStatus:           3,
				IfInOctets:         uint64(0x054EAF724CB3A4),
				IfInUcastPkts:      0x2C5F1C7B,
				IfInMulticastPkts:  0x01428D3E,
				IfInBroadcastPkts:  5,
				IfInDiscards:       0,
				IfInErrors:         0x32,
				IfInUnknownProtos:  0,
				IfOutOctets:        uint64(0x90F6490B9E87A),
				IfOutUcastPkts:     0x5066ED16,
				IfOutMulticastPkts: 0x908978AB,
				IfOutBroadcastPkts: 0x33A,
				IfOutDiscards:      0x15B4,
				IfOutErrors:        0,
				IfPromiscuousMode:  2,
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := decodeSFGenericInterfaceCounter(tt.args.r)
			if (err != nil) != tt.wantErr {
				t.Errorf("decodeSFGenericInterfaceCounter() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("decodeSFGenericInterfaceCounter() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_decodeSFEthernetInterfaceCounters(t *testing.T) {
	type args struct {
		r io.ReadSeeker
	}
	tests := []struct {
		name    string
		args    args
		want    *SFEthernetInterfaceCounters
		wantErr bool
	}{
		{
			name: "Test decode ethernet interface counters",
			args: args{
				r: bytes.NewReader(TestDecodeSFEthernetInterfaceCounters),
			},
			want: &SFEthernetInterfaceCounters{
				Dot3StatsAlignmentErrors:           0,
				Dot3StatsFCSErrors:                 0x32,
				Dot3StatsSingleCollisionFrames:     0,
				Dot3StatsMultipleCollisionFrames:   0,
				Dot3StatsSQETestErrors:             0,
				Dot3StatsDeferredTransmissions:     0,
				Dot3StatsLateCollisions:            0,
				Dot3StatsExcessiveCollisions:       0,
				Dot3StatsInternalMacTransmitErrors: 0,
				Dot3StatsCarrierSenseErrors:        0,
				Dot3StatsFrameTooLongs:             0,
				Dot3StatsInternalMacReceiveErrors:  0,
				Dot3StatsSymbolErrors:              0xF,
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := decodeSFEthernetInterfaceCounters(tt.args.r)
			if (err != nil) != tt.wantErr {
				t.Errorf("decodeSFEthernetInterfaceCounters() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("decodeSFEthernetInterfaceCounters() = %v, want %v", got, tt.want)
			}
		})
	}
}
