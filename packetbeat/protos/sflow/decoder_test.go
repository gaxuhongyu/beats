package sflow

import (
	"bytes"
	"io"
	"reflect"
	"testing"
)

var TestSupportSflowVersionHeader = []byte{
	0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x0A, 0x06, 0x00, 0xFE, 0x00, 0x00,
	0x00, 0x06, 0x02, 0xD5, 0x04, 0xA8, 0x9C, 0x29, 0x56, 0x82, 0x00, 0x00, 0x00, 0x05,
}

var TestUnSupportSflowVersionHeader = []byte{
	0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x0A, 0x06, 0x00, 0xFE, 0x00, 0x00,
	0x00, 0x06, 0x02, 0xD5, 0x04, 0xA8, 0x9C, 0x29, 0x56, 0x82, 0x00, 0x00, 0x00, 0x05,
}

var TestDecodeSflowDataRaw = []byte{
	0x00, 0x01, 0x50, 0xE2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x4E, 0x20,
	0x66, 0xCE, 0xF8, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86,
	0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x05, 0xEE, 0x00, 0x00, 0x05, 0x6E,
	0x00, 0x00, 0x00, 0x80, 0xC8, 0x8D, 0x83, 0xAA, 0x1C, 0x22, 0x3C, 0x8C, 0x40, 0xBC, 0x32, 0x3F, 0x08, 0x00, 0x45, 0x00, 0x05, 0xDC, 0x2C, 0x32,
	0x40, 0x00, 0x3C, 0x06, 0x56, 0x50, 0x0A, 0x17, 0x47, 0x58, 0x0A, 0x99, 0x5A, 0x92, 0xF1, 0xF2, 0x23, 0x84, 0x27, 0x33, 0x4B, 0xEF, 0xA3, 0x79,
	0xFB, 0x5D, 0x50, 0x10, 0x00, 0x64, 0x5B, 0x10, 0x00, 0x00, 0x61, 0x70, 0x69, 0x73, 0x2F, 0x70, 0x61, 0x6F, 0x70, 0x61, 0x6F, 0x2F, 0x67, 0x65,
	0x74, 0x4F, 0x66, 0x66, 0x6C, 0x69, 0x6E, 0x65, 0x4D, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2C, 0x22, 0x74, 0x69, 0x6D, 0x65, 0x5F, 0x6C,
	0x6F, 0x63, 0x61, 0x6C, 0x22, 0x3A, 0x22, 0x31, 0x36, 0x2F, 0x4E, 0x6F, 0x76, 0x2F, 0x32, 0x30, 0x31, 0x37, 0x3A, 0x31, 0x37, 0x3A, 0x32, 0x37,
	0x3A, 0x33, 0x35, 0x20, 0x2B, 0x30, 0x38, 0x30, 0x30, 0x22, 0x2C, 0x22, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x05, 0xEE,
	0x3C, 0x8C, 0x40, 0xBC, 0x32, 0x3F, 0x00, 0x00, 0xC8, 0x8D, 0x83, 0xAA, 0x1C, 0x22, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x03, 0xE9,
	0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
	0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x05, 0xDC, 0x00, 0x00, 0x00, 0x06, 0x0A, 0x17, 0x47, 0x58, 0x0A, 0x99, 0x5A, 0x92, 0x00, 0x00, 0xF1, 0xF2,
	0x00, 0x00, 0x23, 0x84, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xEA, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01,
	0xAC, 0x14, 0x02, 0x33, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x15,
}

func Test_getSampleInfo(t *testing.T) {
	type args struct {
		r io.ReadSeeker
	}
	tests := []struct {
		name    string
		args    args
		want    uint32
		want1   uint32
		wantErr bool
	}{
		{
			name: "Test get sample info",
			args: args{
				r: bytes.NewReader([]byte{0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xF4}),
			},
			want:    3,
			want1:   0xF4,
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, got1, err := getSampleInfo(tt.args.r)
			if (err != nil) != tt.wantErr {
				t.Errorf("getSampleInfo() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if got != tt.want {
				t.Errorf("getSampleInfo() got = %v, want %v", got, tt.want)
			}
			if got1 != tt.want1 {
				t.Errorf("getSampleInfo() got1 = %v, want %v", got1, tt.want1)
			}
		})
	}
}

func Test_read(t *testing.T) {
	type args struct {
		r io.Reader
		v interface{}
	}
	var a uint32
	tests := []struct {
		name    string
		args    args
		wantErr bool
	}{
		{
			name: "Test read uint32",
			args: args{
				r: bytes.NewReader([]byte{0x0E, 0x3A, 0x93, 0x09}),
				v: &a,
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if err := read(tt.args.r, tt.args.v); (err != nil) != tt.wantErr {
				t.Errorf("read() error = %v, wantErr %v", err, tt.wantErr)
			}
			if a != 0xE3A9309 {
				t.Errorf("read value = %v, want: %v", a, 0xE3A9309)
			}
		})
	}
}

func Test_decodeSflowHeader(t *testing.T) {
	type args struct {
		r io.ReadSeeker
	}
	tests := []struct {
		name    string
		args    args
		want    *SFDatagram
		wantErr bool
	}{
		{
			name: "Test decode sflow header",
			args: args{
				r: bytes.NewReader(TestSupportSflowVersionHeader),
			},
			want: &SFDatagram{
				Version:      5,
				IPVersion:    1,
				AgentAddress: []byte{0x0A, 0x06, 0x00, 0xFE},
				AgentSubID:   6,
				SequenceNo:   0x02D504A8,
				SysUpTime:    0x9C295682,
				SamplesNo:    5,
			},
			wantErr: false,
		},
		{
			name: "Test decode unsupport sflow version ",
			args: args{
				r: bytes.NewReader(TestUnSupportSflowVersionHeader),
			},
			want:    nil,
			wantErr: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := decodeSflowHeader(tt.args.r)
			if (err != nil) != tt.wantErr {
				t.Errorf("decodeSflowHeader() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("decodeSflowHeader() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_decodeSflowData(t *testing.T) {
	type args struct {
		r   io.ReadSeeker
		tag uint32
		len uint32
	}
	tran := &SFTransaction{}
	r := bytes.NewReader(TestDecodeSflowDataRaw)
	r.Seek(int64(8), 1)
	t1, _ := flowExpandedSampleDecode(r, 0x013C)
	tran.data = t1
	tests := []struct {
		name    string
		args    args
		want    *SFTransaction
		wantErr bool
	}{
		{
			name: "Test decode expanded samples flow data",
			args: args{
				r:   bytes.NewReader(TestDecodeSflowDataRaw),
				tag: 0x03,
				len: 0x013C,
			},
			want:    tran,
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := decodeSflowData(tt.args.r, tt.args.tag, tt.args.len)
			if (err != nil) != tt.wantErr {
				t.Errorf("decodeSflowData() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("decodeSflowData() = %v, want %v", got, tt.want)
			}
		})
	}
}
