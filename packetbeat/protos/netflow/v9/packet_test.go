package v9

import (
	"bytes"
	"io"
	"reflect"
	"testing"
)

var TestPacketHeaderData = []byte{
	0x00, 0x09, 0x00, 0x02, 0xB1, 0xA9, 0x48, 0xAC,
	0x5B, 0x17, 0x9B, 0x60, 0x00, 0x00, 0xF4, 0xC4,
	0x00, 0x00, 0x06, 0x00,
}
var TestTemplateRecordData = []byte{
	0x0C, 0xD1, 0x00, 0x19, 0x00, 0x02, 0x00, 0x08, 0x00, 0x01, 0x00, 0x08, 0x00, 0x16, 0x00, 0x04, 0x00, 0x15, 0x00, 0x04, 0x00,
	0x0A, 0x00, 0x04, 0x00, 0x0E, 0x00, 0x04, 0x00, 0x08, 0x00, 0x04, 0x00, 0x0C, 0x00, 0x04, 0x00, 0x0F, 0x00, 0x04, 0x00, 0x10,
	0x00, 0x04, 0x00, 0x11, 0x00, 0x04, 0x00, 0x07, 0x00, 0x02, 0x00, 0x0B, 0x00, 0x02, 0x00, 0x3C, 0x00, 0x01, 0x00, 0x06, 0x00,
	0x01, 0x00, 0x04, 0x00, 0x01, 0x00, 0x05, 0x00, 0x01, 0x00, 0x09, 0x00, 0x01, 0x00, 0x0D, 0x00, 0x01, 0x00, 0x3D, 0x00, 0x01,
	0x00, 0x59, 0x00, 0x01, 0x00, 0x2B, 0x00, 0x02, 0x00, 0x23, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x22, 0x00, 0x04,
}
var TestFieldSpecifierData = []byte{
	0x00, 0x18, 0x00, 0x08,
}
var TestFlowSetHeaderData = []byte{
	0x00, 0x00, 0x00, 0x6c,
}

var TestTemplateFlowSetData = []byte{
	0x00, 0x00, 0x00, 0x6C, 0x0C, 0xD2, 0x00, 0x19, 0x00, 0x18, 0x00, 0x08, 0x00, 0x17, 0x00, 0x08, 0x00, 0x16, 0x00, 0x04, 0x00,
	0x15, 0x00, 0x04, 0x00, 0x0A, 0x00, 0x04, 0x00, 0x0E, 0x00, 0x04, 0x00, 0x08, 0x00, 0x04, 0x00, 0x0C, 0x00, 0x04, 0x00, 0x0F,
	0x00, 0x04, 0x00, 0x10, 0x00, 0x04, 0x00, 0x11, 0x00, 0x04, 0x00, 0x07, 0x00, 0x02, 0x00, 0x0B, 0x00, 0x02, 0x00, 0x3C, 0x00,
	0x01, 0x00, 0x06, 0x00, 0x01, 0x00, 0x04, 0x00, 0x01, 0x00, 0x05, 0x00, 0x01, 0x00, 0x09, 0x00, 0x01, 0x00, 0x0D, 0x00, 0x01,
	0x00, 0x3D, 0x00, 0x01, 0x00, 0x59, 0x00, 0x01, 0x00, 0x33, 0x00, 0x02, 0x00, 0x23, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00,
	0x22, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6C, 0x0C, 0xD1, 0x00, 0x19, 0x00, 0x02, 0x00, 0x08, 0x00, 0x01, 0x00, 0x08, 0x00, 0x16,
	0x00, 0x04, 0x00, 0x15, 0x00, 0x04, 0x00, 0x0A, 0x00, 0x04, 0x00, 0x0E, 0x00, 0x04, 0x00, 0x08, 0x00, 0x04, 0x00, 0x0C, 0x00,
	0x04, 0x00, 0x0F, 0x00, 0x04, 0x00, 0x10, 0x00, 0x04, 0x00, 0x11, 0x00, 0x04, 0x00, 0x07, 0x00, 0x02, 0x00, 0x0B, 0x00, 0x02,
	0x00, 0x3C, 0x00, 0x01, 0x00, 0x06, 0x00, 0x01, 0x00, 0x04, 0x00, 0x01, 0x00, 0x05, 0x00, 0x01, 0x00, 0x09, 0x00, 0x01, 0x00,
	0x0D, 0x00, 0x01, 0x00, 0x3D, 0x00, 0x01, 0x00, 0x59, 0x00, 0x01, 0x00, 0x2B, 0x00, 0x02, 0x00, 0x23, 0x00, 0x01, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x22, 0x00, 0x04,
}

func TestPacketHeader_Unmarshal(t *testing.T) {
	type fields struct {
		Version        uint16
		Count          uint16
		SysUpTime      uint32
		UnixSecs       uint32
		SequenceNumber uint32
		SourceID       uint32
	}
	type args struct {
		r io.ReadSeeker
	}
	tests := []struct {
		name    string
		fields  fields
		args    args
		wantErr bool
	}{
		{
			name: "Test PacketHeader Unmarshal",
			fields: fields{
				Version:        0x09,
				Count:          0x02,
				SysUpTime:      0xB1A948AC,
				UnixSecs:       0x5B179B60,
				SequenceNumber: 0x0000F4C4,
				SourceID:       0x0600,
			},
			args: args{
				r: bytes.NewReader(TestPacketHeaderData),
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			ph := &PacketHeader{
				Version:        tt.fields.Version,
				Count:          tt.fields.Count,
				SysUpTime:      tt.fields.SysUpTime,
				UnixSecs:       tt.fields.UnixSecs,
				SequenceNumber: tt.fields.SequenceNumber,
				SourceID:       tt.fields.SourceID,
			}
			p := &PacketHeader{}
			if err := p.Unmarshal(tt.args.r); (err != nil) != tt.wantErr {
				t.Errorf("PacketHeader.Unmarshal() error = %v, wantErr %v", err, tt.wantErr)
			}
			if !reflect.DeepEqual(p, ph) {
				t.Errorf("PacketHeader.Unmarshal() = %v, want %v", p, ph)
			}
		})
	}
}

func TestTemplateRecord_Unmarshal(t *testing.T) {
	type fields struct {
		TemplateID uint16
		FieldCount uint16
		Fields     []FieldSpecifier
	}
	type args struct {
		r io.ReadSeeker
	}
	tests := []struct {
		name    string
		fields  fields
		args    args
		wantErr bool
	}{
		{
			name: "Test Template Record Unmarshal",
			fields: fields{
				TemplateID: 0x0CD1,
				FieldCount: 0x0019,
				Fields: []FieldSpecifier{
					{2, 8}, {1, 8}, {22, 4}, {21, 4}, {10, 4}, {14, 4}, {8, 4},
					{12, 4}, {15, 4}, {16, 4}, {17, 4}, {7, 2}, {11, 2},
					{60, 1}, {6, 1}, {4, 1}, {5, 1}, {9, 1}, {13, 1},
					{61, 1}, {89, 1}, {43, 2}, {35, 1}, {0, 1}, {34, 4}},
			},
			args: args{
				r: bytes.NewReader(TestTemplateRecordData),
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			tr := &TemplateRecord{
				TemplateID: tt.fields.TemplateID,
				FieldCount: tt.fields.FieldCount,
				Fields:     tt.fields.Fields,
			}
			p := &TemplateRecord{}
			if err := p.Unmarshal(tt.args.r); (err != nil) != tt.wantErr {
				t.Errorf("TemplateRecord.Unmarshal() error = %v, wantErr %v", err, tt.wantErr)
			}
			if !reflect.DeepEqual(p, tr) {
				t.Errorf("PacketHeader.Unmarshal() = %v, want %v", p, tr)
			}
		})
	}
}

func TestFieldSpecifier_Unmarshal(t *testing.T) {
	type fields struct {
		Type   uint16
		Length uint16
	}
	type args struct {
		r io.ReadSeeker
	}
	tests := []struct {
		name    string
		fields  fields
		args    args
		wantErr bool
	}{
		{
			name: "Test Field Specifier Unmarshal",
			fields: fields{
				Type:   0x18,
				Length: 0x08,
			},
			args: args{
				r: bytes.NewReader(TestFieldSpecifierData),
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			fs := &FieldSpecifier{
				Type:   tt.fields.Type,
				Length: tt.fields.Length,
			}
			p := &FieldSpecifier{}
			if err := p.Unmarshal(tt.args.r); (err != nil) != tt.wantErr {
				t.Errorf("FieldSpecifier.Unmarshal() error = %v, wantErr %v", err, tt.wantErr)
			}
			if !reflect.DeepEqual(p, fs) {
				t.Errorf("FieldSpecifier.Unmarshal() = %v, want %v", p, fs)
			}
		})
	}
}

func TestFlowSetHeader_Unmarshal(t *testing.T) {
	type fields struct {
		ID     uint16
		Length uint16
	}
	type args struct {
		r io.ReadSeeker
	}
	tests := []struct {
		name    string
		fields  fields
		args    args
		wantErr bool
	}{
		{
			name: "Test Flow Set Header Unmarshal",
			fields: fields{
				ID:     0x00,
				Length: 0x6c,
			},
			args: args{
				r: bytes.NewReader(TestFlowSetHeaderData),
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			fsh := &FlowSetHeader{
				ID:     tt.fields.ID,
				Length: tt.fields.Length,
			}
			p := &FlowSetHeader{}
			if err := p.Unmarshal(tt.args.r); (err != nil) != tt.wantErr {
				t.Errorf("FlowSetHeader.Unmarshal() error = %v, wantErr %v", err, tt.wantErr)
			}
			if !reflect.DeepEqual(p, fsh) {
				t.Errorf("FlowSetHeader.Unmarshal() = %v, want %v", p, fsh)
			}
		})
	}
}
